document.addEventListener('DOMContentLoaded', function() {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const carousels = document.querySelectorAll('.services-carousel');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—É—Å–µ–ª—å
  carousels.forEach((carousel) => {
      const container = carousel.querySelector('.services-container');
      const prevBtn = carousel.parentElement.querySelector('#prevBtn');
      const nextBtn = carousel.parentElement.querySelector('#nextBtn');
      const cards = carousel.querySelectorAll('.service-card');
      let currentIndex = 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      function getCardsPerView() {
          const containerWidth = carousel.offsetWidth;
          if (cards.length === 0) return 0;
          
          const cardStyle = window.getComputedStyle(cards[0]);
          const cardWidth = cards[0].offsetWidth + 
                          parseInt(cardStyle.marginLeft) + 
                          parseInt(cardStyle.marginRight);
          
          return Math.floor(containerWidth / cardWidth);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
      function updateCarousel() {
          if (cards.length === 0) return;
          
          const cardStyle = window.getComputedStyle(cards[0]);
          const cardWidth = cards[0].offsetWidth + 
                          parseInt(cardStyle.marginLeft) + 
                          parseInt(cardStyle.marginRight);
          
          container.style.transform = `translateX(-${currentIndex * cardWidth}px)`;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
          const cardsPerView = getCardsPerView();
          const maxIndex = Math.max(cards.length - cardsPerView, 0);
          
          if (prevBtn) prevBtn.disabled = currentIndex === 0;
          if (nextBtn) nextBtn.disabled = currentIndex >= maxIndex;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
          if (prevBtn) prevBtn.style.opacity = prevBtn.disabled ? 0.5 : 1;
          if (nextBtn) nextBtn.style.opacity = nextBtn.disabled ? 0.5 : 1;
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
      if (prevBtn) {
          prevBtn.addEventListener('click', () => {
              if (currentIndex > 0) {
                  currentIndex--;
                  updateCarousel();
              }
          });
      }

      if (nextBtn) {
          nextBtn.addEventListener('click', () => {
              const cardsPerView = getCardsPerView();
              const maxIndex = Math.max(cards.length - cardsPerView, 0);
              
              if (currentIndex < maxIndex) {
                  currentIndex++;
                  updateCarousel();
              }
          });
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Å debounce
      let resizeTimeout;
      window.addEventListener('resize', () => {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(() => {
              currentIndex = 0;
              updateCarousel();
          }, 100);
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      updateCarousel();
  });
});

//BREND SECTION

document.addEventListener('DOMContentLoaded', function() {
  const track = document.querySelector('.carousel-track');
  const items = track.querySelectorAll('div'); // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ div-—ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ img –∏ p
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —Ç–µ–∫—Å—Ç) –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ—Å—Ç–∏
  items.forEach(item => {
    const clone = item.cloneNode(true);
    track.appendChild(clone);
  });
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  track.addEventListener('animationiteration', () => {
    track.style.animation = 'none';
    void track.offsetWidth; // Trigger reflow
    track.style.animation = 'scroll 40s linear infinite';
  });
});

//–∫–Ω–æ–ø–∫–∞ –ü—ñ–¥–Ω—è—Ç–∏—Å—å –≤ –≥–æ—Ä—É

document.getElementById('back-to-top').addEventListener('click', function(e) {
  e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  
  // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç header
  const headerElement = document.getElementById('header');
  
  // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–æ header
  if (headerElement) {
    headerElement.scrollIntoView({
      behavior: 'smooth'
    });
  }
});



// –ë–£–†–ì–ï–† –ö–ù–û–ü–ö–ê

document.addEventListener('DOMContentLoaded', function() {
  const burger = document.querySelector('.burger-menu');
  const nav = document.querySelector('.nav');
  const dropdowns = document.querySelectorAll('.dropdown');

  // –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  burger.addEventListener('click', function() {
    this.classList.toggle('active');
    nav.classList.toggle('active');
  });

  // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤
  dropdowns.forEach(dropdown => {
    const link = dropdown.querySelector('a');
    
    link.addEventListener('click', function(e) {
      if (window.innerWidth <= 992 && this.getAttribute('href') === '#') {
        e.preventDefault();
        const content = this.nextElementSibling;
        content.style.display = content.style.display === 'block' ? 'none' : 'block';
      }
    });
  });
});

// –ö–ê–†–£–°–ï–õ–¨ –ü–û–î–ë–û–†–ê –ó–ê–ü–ß–ê–°–¢–ï–ô

document.addEventListener('DOMContentLoaded', function() {
  const carousel = document.querySelector('.carousel');
  const images = document.querySelectorAll('.carousel img');
  let currentIndex = 0;
  const visibleImages = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  
  function showNextImages() {
      // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      images.forEach(img => {
          img.style.display = 'none';
          img.classList.remove('active');
          img.classList.remove('fade');
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      for (let i = 0; i < visibleImages; i++) {
          const index = (currentIndex + i) % images.length;
          images[index].style.display = 'block';
          if (i === 0) {
              images[index].classList.add('active');
              images[index].classList.add('fade');
          }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      currentIndex = (currentIndex + 1) % (images.length - visibleImages + 1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
  showNextImages();
  setInterval(showNextImages, 4000); // –°–º–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
  
  // –î–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener('resize', function() {
      // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  });
});

// –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û + –§–û–†–ú–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò

document.addEventListener('DOMContentLoaded', function() {
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const botToken = '7401776138:AAEIszjxs4_-9alGK01THnbG9VHvAGUrEwA';
  const adminChatIds = ['398501551'];

  // ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û =====
  const modal = document.getElementById('callbackModal');
  const modalForm = document.getElementById('modalForm');
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  document.querySelector('.details-hero-btn')?.addEventListener('click', function(e) {
    e.preventDefault();
    modal.style.display = 'block';
    document.body.classList.add('modal-open');
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener('click', function(e) {
  if (e.target === modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
  }
});

  document.querySelector('.modal-close')?.addEventListener('click', function() {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
  });

  

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  if (modalForm) {
    modalForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      console.log('–§–æ—Ä–º–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
      const name = document.getElementById('modalName')?.value.trim();
      const phone = document.getElementById('modalPhone')?.value.trim();
      const vin = document.getElementById('modalVin')?.value.trim();
      const carModel = document.getElementById('modalCar')?.value.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneRegex = /^[\d\s\-+]{10,}$/;
      const cleanPhone = phone?.replace(/\D/g, '') || '';

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:\n\n` +
                     `‚ñ™ –ò–º—è: ${name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                     `‚ñ™ –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
                     `‚ñ™ VIN: ${vin || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `‚ñ™ –ê–≤—Ç–æ: ${carModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`;

      try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:', message); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await sendToTelegram(message);
        
        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        alert('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        modalForm.reset();
        modal.style.display = 'none';
        document.body.classList.remove('modal-open');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        alert('‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.');
      }
    });
  }

  // ===== –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò =====
  async function sendToTelegram(text) {
    const promises = adminChatIds.map(chatId => {
      return fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML'
        })
      });
    });
    
    return await Promise.all(promises);
  }
});

// –§–û–†–ú–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò

document.getElementById('callbackForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const name = document.getElementById('nameInput').value.trim();
  const phoneNumber = document.getElementById('phoneInput').value.trim();
  const messageText = document.getElementById('messageInput').value.trim();
  const responseMessage = document.getElementById('responseMessage');
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)
  const phoneRegex = /[\d]{10,}/;
  const cleanPhone = phoneNumber.replace(/\D/g, ''); // –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  
  if (!phoneRegex.test(cleanPhone)) {
    responseMessage.textContent = "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!";
    responseMessage.className = "response-message error";
    responseMessage.style.display = "block";
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const telegramMessage = `üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:\n\n` +
                     `‚ñ™ –ò–º—è: ${name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                     `‚ñ™ –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}\n` +
                     `‚ñ™ –ê–≤—Ç–æ: ${messageText || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`;

  const botToken = '7401776138:AAEIszjxs4_-9alGK01THnbG9VHvAGUrEwA';
  const adminChatIds = ['398501551'];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
  Promise.all(
    adminChatIds.map(chatId => 
      fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: telegramMessage
        })
      })
    )
  )
  .then(responses => Promise.all(responses.map(res => res.json())))
  .then(data => {
    responseMessage.textContent = "–î—è–∫—É—î–º–æ! –ú–∏ –≤–∞–º –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.";
    responseMessage.className = "response-message success";
    responseMessage.style.display = "block";
    document.getElementById('callbackForm').reset();
    
    setTimeout(() => {
      responseMessage.style.display = "none";
    }, 5000);
  })
  .catch(error => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", error);
    responseMessage.textContent = "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º.";
    responseMessage.className = "response-message error";
    responseMessage.style.display = "block";
  });
});